// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enum for user roles
enum UserRole {
  hod
  kpi_coordinator
  faculty
}

// QOC table - separate entity with full system access
model qoc {
  qoc_id       Int    @id @default(autoincrement())
  qoc_name     String @db.VarChar(255)
  qoc_email    String @unique
  qoc_password String @db.Text
  qoc_role     String @db.VarChar(50)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  
  // QOC creates pillar and KPI templates
  pillar_templates pillar_templates[]
  kpi_templates    kpi_templates[]
}

// Departments table
model departments {
  dept_id       Int       @id @default(autoincrement())
  dept_name     String    @unique(map: "dept_name")
  hod_id        Int?
  dept_creation DateTime? @default(now()) @db.Timestamp(0)
  hod_name      String?
  
  // Relations
  users                users[]
  department_pillars   department_pillars[]
  department_kpis      department_kpis[]

  @@index([hod_id], map: "fk_departments_hod")
}

// Users table - belongs to a department
model users {
  user_id       Int          @id @default(autoincrement())
  user_name     String       @db.Char(50)
  user_email    String       @unique(map: "user_email")
  user_password String       @db.Text
  user_role     UserRole     @default(faculty) // hod, kpi_coordinator, faculty
  dept_id       Int          // Required - every user must belong to a department
  created_at    DateTime     @default(now()) @db.Timestamp(0)
  
  department    departments  @relation(fields: [dept_id], references: [dept_id], onDelete: Cascade)

  @@index([dept_id], map: "fk_users_dept")
}

// Pillar templates created by QOC
model pillar_templates {
  template_id     Int       @id @default(autoincrement())
  pillar_name     String    @db.VarChar(255)
  description     String?   @db.Text
  created_by_qoc  Int       // Foreign key to QOC
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  updated_at      DateTime  @updatedAt
  
  qoc             qoc       @relation(fields: [created_by_qoc], references: [qoc_id], onDelete: Cascade)
  
  // When assigned to departments, creates department_pillars
  department_pillars department_pillars[]
  
  @@index([created_by_qoc], map: "fk_pillar_templates_qoc")
}

// KPI templates created by QOC
model kpi_templates {
  template_id     Int       @id @default(autoincrement())
  kpi_name        String    @db.VarChar(255)
  kpi_description String?   @db.Text
  form_data       Json      // Template form structure
  target_value    Float?    // Default target value
  created_by_qoc  Int       // Foreign key to QOC
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  updated_at      DateTime  @updatedAt
  
  qoc             qoc       @relation(fields: [created_by_qoc], references: [qoc_id], onDelete: Cascade)
  
  // When assigned to departments, creates department_kpis
  department_kpis department_kpis[]
  
  @@index([created_by_qoc], map: "fk_kpi_templates_qoc")
}

// Department-specific pillars (copies of templates)
model department_pillars {
  dept_pillar_id    Int       @id @default(autoincrement())
  dept_id           Int       // Foreign key to departments
  template_id       Int       // Reference to original template
  pillar_name       String    @db.VarChar(255) // Copy from template
  description       String?   @db.Text // Copy from template
  assigned_date     DateTime  @default(now()) @db.Timestamp(0)
  status            String    @default("active") @db.VarChar(50) // active, inactive, completed
  
  department        departments      @relation(fields: [dept_id], references: [dept_id], onDelete: Cascade)
  pillar_template   pillar_templates @relation(fields: [template_id], references: [template_id], onDelete: Cascade)
  
  // Relations to department KPIs
  department_kpis   department_kpis[]
  
  @@unique([dept_id, template_id], map: "dept_pillar_template_unique") // One pillar template per department
  @@index([dept_id], map: "fk_dept_pillars_dept")
  @@index([template_id], map: "fk_dept_pillars_template")
}

// Department-specific KPIs (copies of templates assigned to pillars)
model department_kpis {
  dept_kpi_id       Int       @id @default(autoincrement())
  dept_id           Int       // Foreign key to departments
  dept_pillar_id    Int       // Foreign key to department_pillars
  template_id       Int       // Reference to original template
  kpi_name          String    @db.VarChar(255) // Copy from template
  kpi_description   String?   @db.Text // Copy from template
  form_data         Json      // Copy from template
  target_value      Float?    // Copy from template, can be modified
  current_value     Float?    // Actual achieved value
  kpi_status        String    @default("pending") @db.VarChar(50) // pending, in_progress, completed, overdue
  assigned_date     DateTime  @default(now()) @db.Timestamp(0)
  due_date          DateTime? // Optional due date
  completed_date    DateTime? // Date when KPI was completed
  comments          String?   @db.Text
  form_responses    Json?     // User responses to the form
  
  department        departments        @relation(fields: [dept_id], references: [dept_id], onDelete: Cascade)
  department_pillar department_pillars @relation(fields: [dept_pillar_id], references: [dept_pillar_id], onDelete: Cascade)
  kpi_template      kpi_templates      @relation(fields: [template_id], references: [template_id], onDelete: Cascade)
  
  @@unique([dept_pillar_id, template_id], map: "dept_kpi_pillar_template_unique") // One KPI template per pillar per department
  @@index([dept_id], map: "fk_dept_kpis_dept")
  @@index([dept_pillar_id], map: "fk_dept_kpis_pillar")
  @@index([template_id], map: "fk_dept_kpis_template")
}
