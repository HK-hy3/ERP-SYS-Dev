// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// Enum for user roles
enum UserRole {
  hod
  kpi_coordinator
  faculty
}

// QAC table - separate entity with full system access
model Qac {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  qac_name    String
  qac_email   String   @unique
  qac_password String
  qac_role    String
  created_at  DateTime @default(now())
  pillar_templates PillarTemplate[]
  kpi_templates    KpiTemplate[]
  @@map("qac")
}

// Departments table
model Department {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  dept_name     String   @unique
  hod_id        String?  @db.ObjectId
  dept_creation DateTime? @default(now())
  hod_name      String?
  users                User[]
  department_pillars   DepartmentPillar[]
  department_kpis      DepartmentKpi[]
  @@map("departments")
}

// Users table - belongs to a department
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user_name     String
  user_email    String   @unique
  user_password String
  user_role     UserRole @default(faculty) // hod, kpi_coordinator, faculty
  dept_id       String   @db.ObjectId // Required - every user must belong to a department
  created_at    DateTime @default(now())
  department    Department  @relation(fields: [dept_id], references: [id], onDelete: Cascade)
  @@map("users")
}

// Pillar templates created by QAC
model PillarTemplate {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  pillar_name   String
  description   String?
  created_by_qac String  @db.ObjectId // Foreign key to QAC
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  qac             Qac       @relation(fields: [created_by_qac], references: [id], onDelete: Cascade)
  department_pillars DepartmentPillar[]
  @@map("pillar_templates")
}

// KPI templates created by QAC
model KpiTemplate {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  kpi_name      String
  kpi_description String?
  form_data     Json      // Template form structure
  target_value  Float?    // Default target value
  created_by_qac String   @db.ObjectId // Foreign key to QAC
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  qac             Qac       @relation(fields: [created_by_qac], references: [id], onDelete: Cascade)
  department_kpis DepartmentKpi[]
  @@map("kpi_templates")
}

// Department-specific pillars (copies of templates)
model DepartmentPillar {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  dept_id       String   @db.ObjectId // Foreign key to departments
  template_id   String   @db.ObjectId // Reference to original template
  pillar_name   String   // Copy from template
  description   String?  // Copy from template
  assigned_date DateTime @default(now())
  status        String   @default("active") // active, inactive, completed
  department        Department      @relation(fields: [dept_id], references: [id], onDelete: Cascade)
  pillar_template   PillarTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade)
  department_kpis   DepartmentKpi[]
  @@unique([dept_id, template_id]) // One pillar template per department
  @@map("department_pillars")
}

// Department-specific KPIs (copies of templates assigned to pillars)
model DepartmentKpi {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  dept_id       String   @db.ObjectId // Foreign key to departments
  dept_pillar_id String  @db.ObjectId // Foreign key to department_pillars
  template_id   String   @db.ObjectId // Reference to original template
  kpi_name      String   // Copy from template
  kpi_description String? // Copy from template
  form_data     Json      // Copy from template
  target_value  Float?    // Copy from template, can be modified
  current_value Float?    // Actual achieved value
  kpi_status    String    @default("pending") // pending, in_progress, completed, overdue
  assigned_date DateTime  @default(now())
  due_date      DateTime? // Optional due date
  completed_date DateTime? // Date when KPI was completed
  comments      String?
  form_responses Json?     // User responses to the form
  department        Department        @relation(fields: [dept_id], references: [id], onDelete: Cascade)
  department_pillar DepartmentPillar @relation(fields: [dept_pillar_id], references: [id], onDelete: Cascade)
  kpi_template      KpiTemplate      @relation(fields: [template_id], references: [id], onDelete: Cascade)
  @@unique([dept_pillar_id, template_id]) // One KPI template per pillar per department
  @@map("department_kpis")
}
